# http://travis-ci.org configuration file for AliceVision

language: cpp
dist: trusty
sudo: false
compiler:
  - gcc
  #- clang: #Consider clang later, since cereal does not build fine on the clang CI version
  #  - "3.3"

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      #- cmake # Manually install latest version (>=3.0)
      - lcov
      - libpng-dev
      - libjpeg8-dev
      - libtiff4-dev
      - libxxf86vm1
      - libxxf86vm-dev
      - x11proto-xf86vidmode-dev
      - libxrandr-dev
      - g++-4.8
      - libatlas-base-dev
      - libsuitesparse-dev

env:
  global:
    - NUM_CPU="`grep processor /proc/cpuinfo | wc -l`"; echo $NUM_CPU
    - BUILD_TYPE="Release"
    - BUILD_SYSTEM="`uname -s`"
    - BUILD_PROCESSOR="`uname -p`"
    # NOTE: we need to install the dependencies in install-deps because for those ones using the cmake config file,
    # some of their dependencies are linked with hard-coded paths to the place where they where installed when said
    # dependency was built. E.g. Alembic depends on openExr and the AlembicConfig.cmake contains hard-coded links to
    # the path /home/travis/build/alicevision/AliceVisionDependencies/install-deps, which was where openExr was installed
    # when Alembic was built (see AliceVisionDependencies repository).
    - DEPS_INSTALL_PATH=${TRAVIS_BUILD_DIR}/../AliceVisionDependencies/install-deps


before_install:
 - date -u
 - uname -a
 - if [[ ${TRAVIS_OS_NAME} == "linux" ]]; then
     lsb_release -a;
   elif [[ ${TRAVIS_OS_NAME} == "osx" ]]; then
     sw_vers -productVersion;
   fi
 - ccache -s
 - gem install coveralls-lcov


install:
 - ./ci/install-cmake.sh
 - ./ci/install-dependencies.sh


before_script:
  - . ./ci/env.sh
  - export CXX="g++-4.8"
  - export CTEST_OUTPUT_ON_FAILURE=1
  - export CMAKE_PREFIX_PATH="${DEPS_INSTALL_PATH}"
  - mkdir $ALICEVISION_BUILD
  - cd $ALICEVISION_BUILD
  - >
     cmake \
       -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
       -DTARGET_ARCHITECTURE=core \
       -DALICEVISION_BUILD_TESTS=ON \
       -DALICEVISION_BUILD_EXAMPLES=ON \
       -DALICEVISION_USE_OPENCV=ON \
       -DALICEVISION_USE_CUDA=OFF \
       -DOpenCV_DIR="${DEPS_INSTALL_PATH}/share/OpenCV" \
       -DALICEVISION_USE_OPENGV=ON \
       -DOPENGV_DIR="${DEPS_INSTALL_PATH}" \
       -DBOOST_NO_CXX11=ON \
       -DCeres_DIR="${DEPS_INSTALL_PATH}/share/Ceres" \
       -DEIGEN_INCLUDE_DIR_HINTS="${DEPS_INSTALL_PATH}" \
       -DALICEVISION_USE_CCTAG=OFF \
       -DALICEVISION_USE_ALEMBIC:BOOL=ON  \
       -DAlembic_DIR:PATH="${DEPS_INSTALL_PATH}/lib/cmake/Alembic" \
       . $ALICEVISION_SOURCE
  # Build for code coverage evaluation
  #- cmake -DALICEVISION_BUILD_COVERAGE=ON -DALICEVISION_BUILD_TESTS=ON -DALICEVISION_BUILD_EXAMPLES=ON . ../AliceVision

script:
# limit GCC builds to a reduced number of thread for the virtual machine
  - make -j 2 VERBOSE=1
  - export OMP_NUM_THREADS=2
# Perform unit tests only on GCC builds
  - if [ "$CC" = "gcc" ]; then make test; fi
# Perform benchmark through ground truth tests with different scenes
  - >
    if [ -n "$TRAVIS_PULL_REQUEST" ]; then # limit to PR builds
      if folder_not_empty "$GT_TEST_SOURCE"; then
        echo "Evaluation benchmark found in cache.";
        cd $GT_TEST_SOURCE
        git pull  # ensure that we are up-to-date
      else
        git clone --branch master https://github.com/alicevision/SfM_quality_evaluation.git $GT_TEST_SOURCE;
      fi
      cd $GT_TEST_SOURCE
      git checkout 1828a5076ccca86fd523c92a768f1d518dfdbb91 # checkout a specific commit to ensure repeatability
      python EvaluationLauncher.py -s "$ALICEVISION_BUILD/$BUILD_SYSTEM-$BUILD_PROCESSOR" -i Benchmarking_Camera_Calibration_2008/ -o ${GT_TEST_OUTPUT} -r ${GT_TEST_RESULTS} --limit 3
      cat ${GT_TEST_RESULTS}
      # Return to root and remove GT huge files to avoid cache problems
      cd $TRAVIS_BUILD_DIR
      rm -rf $GT_TEST_SOURCE
      rm -rf $GT_TEST_OUTPUT
    fi

#after_success:
#  - cd ../AliceVision
#  # If GCC: compute code coverage and export it to coveralls
#  - if [ "$CC" = "gcc" ];
#    then
#      lcov --directory ../build/AliceVision --base-directory=. --capture --output-file=coverage.info;
#      lcov --remove coverage.info '/usr*' -o coverage.info;
#      lcov --remove coverage.info '*_test.cpp*' -o coverage.info;
#      lcov --remove coverage.info '*/third_party/*' -o coverage.info;
#      lcov --remove coverage.info '*/src/dependencies/*' -o coverage.info;
#      coveralls-lcov coverage.info;
#    fi

# Before uploading the new cache archive
before_cache:
  - ccache -s

cache:
  # Enable compiler cache
  ccache: true

